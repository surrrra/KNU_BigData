# -------------------------------------------------------------
# 파이썬에서 미리 만들어서 제공하는 클래스
# Built-in class
# => 숫자, 문자 저장할 수 있는 class
# => int, float, str, bool, list, tuple, dict, set
# -------------------------------------------------------------

num=12
#num.to_bytes()


# -------------------------------------------------------------
# 내 프로그램(프로젝트)에서 데이터를 표현하는 클래스
# 사용자 정의 클래스
# --------------------------------------------------------------
# 생성 방법
# class 클래스명:
#       변수      -> 클래스가 나타내는 속성, 특징, 성질 ...
#       메서드    -> 클래스의 기능, 역할
# => 클래스를 생성한 것이지 메모리에 데이터를 저장한 건 X (함수 선언과 같음)
# --------------------------------------------------------------

# --------------------------------------------------------------
# 계산기 프로그램을 만들고자 함
# => 계산기 데이터 타입 생성
#   -> 연산 기능(사칙연산)  ===> 기능 ===> 함수
#   -> 데이터             ===> 변수
# => 클래스명 (어떤 데이터가 저장되는지 알 수 있도록 명명) : calc
# => 변수 : num1, num2
# => 함수(메서드) : plus(), minus(), mult(), div()
# --------------------------------------------------------------
class calc:
    # num1=0
    # num2=0    => # __init__에서 변수를 생성하므로 여기서 변수 선언할 필요 없음

    # 객체 생성자(Constructor) --------
    # 클래스명() -> 객체 생성시 호출되는 메서드
    # 파이썬에서 클래스 생성시에 자주 사용되는 기능의 메서드를 미리 만들어서 제공하는 것
    # 형태 def __메서드명__(self)
    # __init__() : 객체 생성시 변수 생성 및 초기화하는 경우 사용
    def __init__(self, num1, num2):  # def __init__(self, num1=0, num2=0): 이런식으로 해도 ㄱㅊ
        print('__init__')
        self.num1=num1
        self.num2=num2

    # 클래스의 기능 => 메서드
    def plus(self, num1, num2):
        print(num1+num2)
        print(self.num1+self.num2)


    def minus(self, num1, num2):
        print(num1-num2)

    def mult(self, num1, num2):
        print(num1*num2)

    def div(self, num1, num2):
        print(num1/num2)


# --------------------------------------------------------------
# 클래스 사용하기 ==> 메모리에 데이터를 저장 => 힙에 객체 생성
#               ==> 클래스명() -> 객체 생성

myCalc=calc(12, 5)
print(f'myCalc => {type(myCalc)}')

# 클래스 안에 존재하는 변수, 함수 접근
# ===> 객체변수명.변수, 객체변수명.함수명
# myCalc.num1=12
# myCalc.num2=5

myCalc.plus(4, 2)


yourCalc=calc(10.3, 5)
yourCalc.plus(12, 3)


otherCalc=calc()
otherCalc.plus(2, 1)
